def app
DOCKER_REGISTRY_CREDENTIALS_ID = '6ba8d05c-ca13-4818-8329-15d41a089ec0'
GITHUB_CREDENTIALS_ID = '433ac100-b3c2-4519-b4d6-207c029a103b'
GITHUB_URL = 'git@github.com:ca-cwds/cans.git'

// Used to avoid known_hosts addition, which would require each machine to have GitHub added in advance (maybe should do?)
GIT_SSH_COMMAND = 'GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"'

// Globals
enum VersionIncrement { MAJOR, MINOR, PATCH }

def debug(String str) {
    echo "[DEBUG] ${str}"
}

// Returns Map of Maps containing the parsed JSON from the pull request event
def getPullRequestEvent() {
  if (!env.pull_request_event){
    debug(" No Pr event, so use default patch label")
   [name:"patch"]
  } else {
  readJSON text: env.pull_request_event
 }
}

// Takes a Map of Maps containing the parsed JSON from the pull request event
// Returns a list of label strings
def getLabels(pullRequestEvent) {
  debug("getLabels( pullRequestEvent: ${pullRequestEvent} )")
  pullRequestEvent.labels.collect([]) { it.name }
}

// Takes an array of strings (labels)
// Returns a VersionIncrement object
def getVersionIncrement(labels) {
    debug("getVersionIncrement( labels: ${labels} )")

    def versionIncrement
    def versionIncrementsFound = 0
    for(label in labels){
        switch(label) {
            case "major":
                versionIncrement = VersionIncrement.MAJOR
                versionIncrementsFound++
                break
            case "minor":
                versionIncrement = VersionIncrement.MINOR
                versionIncrementsFound++
                break
            case "patch":
                versionIncrement = VersionIncrement.PATCH
                versionIncrementsFound++
                break
        }
    }

    if(versionIncrementsFound > 1)
        throw new Exception("More than one version increment label found. Please label PR with only one of 'major', 'minor', or 'patch'")

    if(versionIncrementsFound == 0)
        throw new Exception("No labels found. Please label PR with 'major', 'minor', or 'patch'")

    return versionIncrement
}

// Compares two SemVer tags
// Returns -1 if tag1 is younger, 0 if equal, 1 if tag1 is newer
def compareTags(String tag1, String tag2) {
    debug("compareTags( tag1: ${tag1}, tag2: ${tag2} )")

    def tag1Split = tag1.tokenize('.')
    def tag2Split = tag2.tokenize('.')

    for(def index in (0..2)) {
        def result = tag1Split[index].compareTo(tag2Split[index])
        if(result != 0) {
            return result
        }
    }

    return 0
}

// Gets all the tags that match SemVer format
// Returns a list of strings (version number tags)
def getTags() {
    def gitTagOutput = sh(script: "git tag", returnStdout: true)
    debug("getTags(): git tag Output: ${gitTagOutput}")

    def tags = gitTagOutput.split("\n").findAll{ it =~ /^\d+\.\d+\.\d+$/ }
    return tags
}

// Gets a string indicating what the new tag should be in SemVer format
// Takes a list of strings in sem
// Returns a string with the new version tag
def getNewTag(List tags, VersionIncrement increment) {
    debug("getNewTag( tags: {$tags}, increment: ${increment} )")
    // Sort because comparator is not worked well
    for (i=0;i<tags.size();i++)  {
        for (j=i+1;j<tags.size();j++) {
            def x1 = tags[i].tokenize('.')
            def y1 = tags[j].tokenize('.')
            for(int index in (0..2)) {
                if (x1[index].toInteger() != y1[index].toInteger()) {
                    if (x1[index].toInteger() >  y1[index].toInteger()) {
                        def saveitem = tags[j]
                        tags[j] = tags[i]
                        tags[i] = saveitem
                        break
                        }
                    else {
                    break
                    }
				}
			}
		}
	}

    def mostRecentTag = tags.last()
    def mostRecentTagParts = mostRecentTag.tokenize('.')

    def newTagMajor = mostRecentTagParts[0].toInteger()
    def newTagMinor = mostRecentTagParts[1].toInteger()
    def newTagPatch = mostRecentTagParts[2].toInteger()

    switch(increment) {
        case VersionIncrement.MAJOR:
            newTagMajor++
            newTagMinor = 0
            newTagPatch = 0
            break
        case VersionIncrement.MINOR:
            newTagMinor++
            newTagPatch = 0
            break
        case VersionIncrement.PATCH:
            newTagPatch++
            break
    }

    def newTag = "${newTagMajor}.${newTagMinor}.${newTagPatch}"
    return newTag
}

//Tags the GitHub Repo
def tagRepo(String newTag) {
    debug("tagRepo( newTag: ${newTag} )")
    sshagent (credentials: [GITHUB_CREDENTIALS_ID]) {

        def tagStatus = sh(script: "git tag ${newTag}", returnStatus: true)
        if( tagStatus != 0) {
            throw new Exception("Unable to tag the repository with tag '${newTag}'")
        }

        def configStatus = sh(script: "${GIT_SSH_COMMAND} git config --global user.email cwdsdoeteam@osi.ca.gov; git config --global user.name Jenkins",
            returnStatus: true)
        if( configStatus != 0) {
            throw new Exception("Unable to push the tag '${newTag}'")
        }
        def pushStatus = sh(script: "${GIT_SSH_COMMAND} git push origin ${newTag}",
            returnStatus: true)
        if( pushStatus != 0) {
            throw new Exception("Unable to push the tag '${newTag}'")
        }
    }
}

switch(env.BUILD_JOB_TYPE) {
  case "master": buildMaster(); break;
  case "acceptance": buildAcceptance(); break;
  default: buildPullRequest();
}

def buildPullRequest() {
  node('linux') {
    try {
      checkoutStage()
      buildDockerImageStage()
      lintAndUnitTestStages()
      acceptanceTestStage()
      a11yLintStage()
    } catch(Exception exception) {
      currentBuild.result = "FAILURE"
      throw exception
    } finally {
      cleanupStage()
    }
  }
}

def buildMaster() {
  node('linux') {
    try {
      checkoutStage()
      buildDockerImageStage()
      lintAndUnitTestStages()
      acceptanceTestStage()
      a11yLintStage()
      publishImageStage()
      deployToPreintStage()
    } catch(Exception exception) {
      currentBuild.result = "FAILURE"
      throw exception
    } finally {
      cleanupStage()
    }
  }
}

def buildAcceptance() {
  node('preint') {
    try {
      checkoutStage()
      acceptanceTestPreintStage()
      deployToIntegrationStage()
    } catch(Exception exception) {
      currentBuild.result = "FAILURE"
      throw exception
    } finally {
      cleanupStage()
    }
  }
}

def checkoutStage() {
  stage('Checkout') {
    deleteDir()
    checkout scm
  }
}

def buildDockerImageStage() {


  stage('Build Docker Image') {
    //def GIT_REFSPEC = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
    //app = docker.build("cwds/cans:${GIT_REFSPEC}", "-f docker/web/Dockerfile .")
    app = docker.build("cwds/cans:${env.BUILD_ID}", "-f docker/web/Dockerfile .")

      }

   }

def lintAndUnitTestStages() {
  app.withRun("-e CI=true") { container ->
    lintStage(container)
    unitTestStage(container)
  }
}

def lintStage(container) {
  stage('Lint') {
    sh "docker exec -t ${container.id} yarn lint"
    sh "docker exec -t ${container.id} rubocop"
  }
}

def unitTestStage(container) {
  stage('Unit Test') {
    sh "docker exec -t ${container.id} bash -c 'yarn test:coverage'"
    sh "docker exec -t ${container.id} yarn test:rspec"
  }
}

def acceptanceTestStage() {
  stage('Acceptance Test') {
    hostname = sh(returnStdout: true, script: '/sbin/ifconfig eth0 | grep "inet addr:" | cut -d: -f2 | cut -d " " -f1').trim()
    withEnv(["HOST=${hostname}"]) {
      withDockerRegistry([credentialsId: DOCKER_REGISTRY_CREDENTIALS_ID]) {
        sh "docker-compose up -d --build"
        sh "sleep 120"
        sh "docker-compose exec -T cans-test bundle exec rspec spec/acceptance"
      }
    }
  }
}

def a11yLintStage() {
  stage('Accessibility Lint') {
    hostname = sh(returnStdout: true, script: '/sbin/ifconfig eth0 | grep "inet addr:" | cut -d: -f2 | cut -d " " -f1').trim()
    withEnv(["HOST=${hostname}"]) {
      withDockerRegistry([credentialsId: DOCKER_REGISTRY_CREDENTIALS_ID]) {
        sh "docker-compose exec -T cans-test bundle exec rspec spec/a11y"
      }
    }
  }
}

def acceptanceTestPreintStage() {
  stage('Acceptance Test Preint') {
    sh "docker-compose up -d --build cans-test"
    sh "docker-compose exec -T --env CANS_WEB_BASE_URL=https://cans.preint.cwds.io/cans cans-test bundle exec rspec spec/acceptance"
  }
}

def publishImageStage() {
  stage('Clone Repo') {
      cleanWs()
      git branch: 'master', credentialsId: GITHUB_CREDENTIALS_ID, url: GITHUB_URL
  }


catchError {
  stage('Preparation') {
         git branch: 'master', credentialsId: GITHUB_CREDENTIALS_ID, url: GITHUB_URL
      }

  def newTag
      stage("Increment Tag") {
        try {
            def prEvent = getPullRequestEvent()
            debug("Increment Tag: prEvent: ${prEvent}")
            def labels = getLabels(prEvent)
            debug("Increment Tag: labels: ${labels}")

            VersionIncrement increment = getVersionIncrement(labels)
            debug("Increment Tag: increment: ${increment}")
            if(increment != null ) {
                def tags = getTags()
                debug("Increment Tag: tags: ${tags}")

                newTag = getNewTag(tags, increment)
                debug("Increment Tag: newTag: ${newTag}")

                tagRepo(newTag)

            }
        }
        catch(Exception ex) {
            error "[ERROR] ${ex}"
        }
    }

  stage('Publish to Dockerhub') {
    withDockerRegistry([credentialsId: DOCKER_REGISTRY_CREDENTIALS_ID]) {
      app.push(newTag)
      app.push('latest')
    }
  }
}
  stage('Trigger Security scan') {
    build job: 'tenable-scan', parameters: [
        [$class: 'StringParameterValue', name: 'CONTAINER_NAME', value: 'cans'],
        [$class: 'StringParameterValue', name: 'CONTAINER_VERSION', value: "${env.BUILD_ID}"]
      ]
    }

}

def deployToPreintStage() {
  stage('Deploy to Preint') {
      withCredentials([usernameColonPassword(credentialsId: 'fa186416-faac-44c0-a2fa-089aed50ca17', variable: 'jenkinsauth')]) {
        sh "curl -u $jenkinsauth 'http://jenkins.mgmt.cwds.io:8080/job/preint/job/deploy-cans/buildWithParameters?token=deployPreint&version=${env.BUILD_ID}'"
    }
  }
}

def deployToIntegrationStage() {
  stage('Deploy Integration') {
    build job: '/Integration Environment/deploy-cans/',
          parameters: [
            string(name: 'APP_VERSION', value : "${APP_VERSION}"),
            string(name: 'inventory', value: 'inventories/integration/hosts.yml')
          ],
          wait: false
  }
}

def cleanupStage() {
  stage('Cleanup') {
    sh "docker-compose down"
    cleanWs()
  }
}

// fake commit line
